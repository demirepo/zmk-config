/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define NUM 1
#define NAV 2
#define ADJUST 3
#define EXTRA 4

/ {

   // Activate ADJUST layer by pressing num and nav
    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <NUM NAV>;
            then-layer = <ADJUST>;
        };
    };

    macros {
        m_arr: m_arr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp EQUAL>,
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp DOT>,
                <&macro_release &kp LSHFT>
                ;
        };

        m_tmpl: m_tmpl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&kp DOLLAR &kp LBRC &kp RBRC &kp LEFT>
                ;
        };

        m_sel: m_sel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>,
                <&macro_tap &kp LEFT>,
                <&macro_press &kp LSHFT>,
                <&macro_tap &kp RIGHT>,
                <&macro_release &kp LSHFT>,
                <&macro_release &kp LCTRL>
                ;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        fm: functional_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <25 28>;
            bindings = <&kp LC(Z)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";
            bindings = <
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// |   `        |    1         |  2        |  3        |  4        |  5          |                                 |  6           |  7        |  8             |  9        |   0           |              |
    &hm N0 GRAVE     &fm F1 N1    &fm F2 N2   &fm F3 N3   &fm F4 N4   &fm F5 N5                                       &fm F6 N6      &fm F7 N7   &fm F8 N8        &fm F9 N9  &fm F10 MINUS   &fm F11 EQUAL
// |  ESC       |    Q         |  W        |  E        |  R        |  T          |                                 |  Y           |  U        |  I             |  O        |   P           | BKSPC        |
    &kp TAB      &hm LC(LSHFT) Q  &kp W       &kp E       &kp R       &kp T                                           &kp Y          &kp U       &kp I            &kp O      &kp P           &fm F12 LBKT
// |  TAB       |    A         |  S        |  D        |  F        |  G          |                                 |  H           |  J        |  K             |  L        |   ;           |   '          |
    &kp ESC        &hm LCTRL A    &kp S     &hm LSHFT D   &hm LALT F  &kp G                                           &kp H          &hm LALT J  &hm RSHFT K      &kp L      &hm RCTRL SEMI  &mt ESC SQT
// | SHIFT      |    Z         |  X        |  C        |  V        |  B          |  MUTE       |  |                |  N           |  M        |  ,             |  .        |   /           | SHIFT        |
    &kp LSHFT    &hm LC(LALT) Z   &kp X       &kp C       &kp V       &kp B         &kp C_MUTE      &kp C_MUTE        &kp N          &kp M       &kp COMMA        &kp DOT    &kp FSLH        &kp RSHFT
//                                |  GUI   | ALT       | CTRL      |  NUM        |  ENTER      |  | SPACE          |  NAV         | CTRL      | ALT            | GUI       |
                          &kp LC(LA(LSHFT))  &kp LGUI   &kp LALT     &lt NUM TAB  &mt LSHFT SPACE    &lt NUM SPACE    &lt NAV BSPC   &kp RALT    &lt EXTRA K_APP  &kp BSLH  
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP &inc_dec_kp LC(C) LC(V)>;
        };

        num_layer {
            display-name = "num";
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// |   `   |m_arr| ${} |  ]   |  )   |  }   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
// |       | sel |  @  |  [   |  (   |  {   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
// |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp PSCRN   &kp LG(N1)  &kp LG(N2) &kp LG(N3)  &kp LG(N4) &kp LG(N5)                       &kp F6        &kp F7   &kp F8  &kp F9  &kp F10       &kp F11
&kp LA(TAB) &m_arr      &m_tmpl    &kp RBKT    &kp RPAR   &kp RBRC                         &kp N6        &kp N7   &kp N8  &kp N9  &kp KP_MINUS  &kp F12
&kp LC(Z)   &m_sel      &trans     &kp LBKT    &kp LPAR   &kp LBRC                         &kp KP_DOT    &kp N4   &kp N5  &kp N6  &kp N0        &kp KP_PLUS
&kp LC(Y)   &kp LA(Z)   &kp LC(X)  &kp LC(C)   &kp LC(V)  &kp LA(B)  &trans      &trans    &kp KP_COMMA  &kp N1   &kp N2  &kp N3  &kp BSLH      &kp LA(F4)
                        &kp LA(X)  &kp LA(C)   &kp LA(V)  &trans     &trans      &trans    &trans        &trans   &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(Z) LC(Y) &inc_dec_kp LC(PG_UP) LC(PG_DN)>;
        };

        nav_layer {
            display-name = "nav";
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
// |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
// |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
// |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
//                |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&trans     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                      &kp LG(N1)  &kp LG(N2)    &kp LG(N3)     &kp LG(N4)  &kp LG(N5) &kp LG(N6)
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &kp RBRC                          &kp DEL     &kp HOME      &kp END        &kp INSERT  &kp PG_DN  &kp PG_UP
&trans     &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp LBRC                          &kp LEFT    &kp DOWN      &kp UP         &kp RIGHT   &kp RET    &kp LC(BSPC)
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans        &trans      &trans  &trans      &kp LC(LEFT)  &kp LC(RIGHT)  &trans      &trans     &kp RA(TAB)
                        &trans       &trans       &trans       &trans        &trans      &trans  &trans      &kp LC(DEL)   &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
// ----------------------------------------------------------------------------------------------------------------------------
// | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
// | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
// |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
// |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
//                    |         |         |         |         |         | |      |      |      |       |      |
            display-name = "adjust";
            bindings = <
&bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                            &none &none &none &none &none &none
&ext_power EP_TOG &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_EFF                         &none &none &none &none &none &none
&none             &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none           &none           &none                                   &none &none &none &none &none &none
&none             &none           &none           &none           &none           &none            &rgb_ug RGB_TOG &none  &none &none &none &none &none &none
                                  &none           &none           &none           &none            &none           &none  &none &none &none &none
            >;
        };

        extra_layer {
            display-name = "extra";
            bindings = <
&bt BT_CLR        &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                            &none   &none         &none      &none        &none &none
&ext_power EP_TOG &rgb_ug RGB_HUD &rgb_ug RGB_HUI &rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_EFF                         &none   &none         &none      &none        &none &none
&none             &rgb_ug RGB_BRD &rgb_ug RGB_BRI &none           &none           &kp A                                   &none   &kp C_PREV    &kp C_PP   &kp C_NEXT   &none &none
&none             &none           &none           &none           &none           &none            &none           &none  &none   &kp C_VOL_DN  &kp C_MUTE &kp C_VOL_UP &none &none
                                  &none           &none           &none           &none            &none           &none  &none   &none         &none      &none
            >;
        };

    };
};
